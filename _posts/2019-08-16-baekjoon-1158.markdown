---
layout: post
title:  "백준알고리즘No.1158 - 조세퍼스 문제"
author: Jihyunhill
categories: Codingstudy
tags: baekjoon coding test 
---

## 들어가며

사실 이 문제는 이산수학과목에서 가장 먼저 접하게 되는 문제였다. 이산수학에서 점화식으로 표현하는 연습을 했다면, 여기서는 직접 구현는 것이 되겠다.

## 어떻게 풀 것인가?

처음 이 문제를 아무런 단서없이 봤다면 눈싸움 할 정도로 뚫어져라 쳐다만 봤을 것이다. 하지만 문제에서 강력한 단서를 줬다!사람들이 원을 이루고 있다는 점!..원이라면 처음과 끝이 이어졌다는 것인데, 데이터 구조를 들은 사람이라면 여기서 무릎을 탁 칠 것이다. 바로 이중연결리스트!

### 이중연결리스트(Double Linked List)

1. 이중연결리스트의 자료구조를 정의할 때, 하나의 노드는 세가지 조건을 충족해야한다.

 - 앞에 노드를 가르키는 노드 포인터변수 prev를 가진다.
 - 뒤에 노드를 가르키는 노드 포인터변수 next를 가진다.
 - 해당 노드의 실제 값(value)를 가진다.

2. 이중연결리스트의 연산

 - 이중연결리스트를 통한 연산 중 원하는 위치에 노드를 추가하는 add연산과, 노드를 삭제하는 delete연산을 가져야 한다. 두 연산에서 논리의 순서가 중요하다. 자칫 순서가 어긋나 노드가 끊어질 수도 있기 때문이다.

3. 이중연결리스트의 사용을 위해서 사용할 수 있는 것들
 
 - 시작 노드를 가르키는 노드 포인터 변수 head
 - 끝 노드를 가르키는 노드 포인터 변수 tail
 - 노드들로 연결된 이중 연결리스트 크기에 대한 변수 size

이중연결리스트에 대한 자료구조는 다음과 같다.

{% highlight javascript %}
#include<iostream>

using namespace std;

class Node{
friend class DLList;
private : 
    Node* prev;
    int value;
    Node* next;
    Node(int v)
    {
        value = v;
        prev = nullptr;
        next = nullptr;
    }
};
class DLList{
private:
    Node* head;
    Node* tail;
public:
    DLList(int num);
    int deletePerson(int k);
    int size;
};
DLList::DLList(int num)
{
    size = 0;
    for(int i = 1; i<= num; i++)
    {
        if(i == 1){
             tail = head = new Node(i);
            head->prev = head->next = head; // 런타임에러로 추가된 부분
        } 
        else{ // 끝에 노드 추가
            tail->next = new Node(i);
            (tail->next)->prev = tail;
            tail = tail->next;
            tail-> next = head;
            head-> prev = tail;
        }
        size++;
    }
}
int DLList::deletePerson(int k)
{
    while(k > 1){
        head = head ->next;
        --k;
    }
    tail = head;
    (head->prev)->next = head->next;
    (head->next)->prev = head->prev;
    head = head->next;
    tail->prev = nullptr;
    tail->next = nullptr;
    int person = tail->value;
    free(tail);
    --size;
    return person;
}
{% endhighlight %}

약간 조세퍼스 문제에 특화된 듯한 느낌이 없지 않아 있긴 하다.

### 사람수와 죽임당할 사람 번호 입력 받아오기

사람명수와 죽일 사람의 번호를 입력 받은 뒤, 죽은 사람들의 번호를 출력한다.

{% highlight javascript %}
int main()
{
    int inputNum,k;
    cin >> inputNum >> k;
    DLList* josephus = new DLList(inputNum);
    cout << "<" << josephus->deletePerson(k);
    while((josephus -> size) > 0 ) cout << ", " << josephus->deletePerson(k);
    cout << ">";
}
{% endhighlight %}

## 마치며

이산수학에서 점화식을 발견하는 것이, 실제 구현하는 것보다 어려운 것 같다??

## 다른 풀이 방법

이산수학의 점화식 자체로는 굉장히 간단하다. 이 점화식과 더불어 배열을 사용해서 구현해보는 풀이가 있는데, 매우 빠르고 간결하고 효율적이다.

점화식은 위키백과에 있는 것을 참고한다.
 
