---
layout: post
title: "OS_Ch2. 시스템 구조- 운영체제 구조"
author: jihyunhill
categories: OperatingSystem
tags: OS System Architecture
---

운영체제는 점점 커지고 복잡한 시스템이 되어왔다. 운영체제가 적절하게 동작하고 쉽게 변경될 수 있게 하는 것은 중요하다. 이를 위한 방법으로는 태스크를 작은 구성 요소로 분할하는 접근 방법과 하나로 일관시키는 시스템이 있는데, 전자가 더 보편적이다.

## 간단한 구조

 1. MS-DOS
 응용프로그램이 디스플레이와 디스크 드라이브에 직접 쓰는 것이 가능했다. 그 결과 사용자 프로그램이 고장나면 시스템 전체가 고장났다. 이는 MS-DOS가 대중화되리라고 생각하지 못했기 때문데 처음 부터 하드웨어의 기능에 제한적이게 된 것이 아닌가 싶다.

 2. Unix운영체제
 MS-DOS처럼 초기에 하드웨어 기능에 의해 제한받는 시스템이었다. 유닉스 운영체제는 두 부분, 커널과 시스템 프로그램으로 구성되어 있다. 커널이 System call을 통해서 각종 운영체제 기능을 제공한다. 하나의 계층으로 결합하기에는 많은 기능이다.

### 모놀리식(Monolithic) 구조

 초기 Unix운영체제에서 하나의 커널계층에서 모든 기능을 통합하여 가지고 있는 구조를 모놀리식 구조라고 한다. 이 구조는 구현하기 어렵고 유지 보수하기도 어렵다. 그러나 성능적으로 보자면, system call 인터페이스나 커널 안에서 통신하는 경우에 오버헤드가 거의 없다. (즉, 통신은 빠르다!)

## 계층 구조

 운영체제를 여러 개의 층으로 나눈 것. 지구의 내부구조를 떠올리면 쉽게 이해할 수 있다. 이는 하향식 접근구조(top-down)인데, 전체적인 기능과 특징이 결정되고 그리고나서 구성 요소로 분리되는 구조이다. 가장 위에 지상층은(N층)은 사용자 층이고, 가장 안층, 최하위 층(0층)은 하드웨어이다. 여기서 운영체제 층은 자료구조와 상위 층에서 호출할 수 있는 루틴의 집합으로 구성된다. 그리고 운영체제층은 다시 자신의 하위 층에 대한 연산을 호출할 수 있다. 즉, 위에서 아래로 불러내는 것이다.(왕이 내시를 부르고, 내시가 무수리를 부르고 뭐 이런 구조라고 생각하면 되겠다.) 

 이 구조는 앞서 본 모놀리식 구조와 비교했을 때, 구현과 디버깅에 대한 장점을 가진다. 구현과 디버깅이 간단하단 말씀! 만일 어느 층을 디버깅할 때 오류가 발견되면 그 하위의 층은 이미 디버깅이 되어있기 때문에 오류는 반드시 그 층에 있게 된다. 따라서 시스템을 계층으로 나누면 시스템의 설걔나 구현이 간단해지는 것이다. 

 한편, system call의 오버헤드가 거의 없었던 모놀리식 구조와 반대로, 계층구조는 각 층의 시스템 호출에 오버헤드를 추가하는데, 그 결과 system call의 수행시간이 오래 걸리게 된다. 

## 마이크로커널

 Unix가 확장됨에 따라, 커널이 커지고 관리하기 힘들어졌다. 이 때 등장한 것이 마이크로커널 접근 방식(Mach)다. 이 방법은 모든 중요치 않은 구성 요소를 커널로부터 제거하고, 그들을 시스템 및 사용자 수준 프로그램으로 구현하여 운영체제를 구성하는 방법이다.
 클라이언트 프로그램과 역시 사용자공간에서 수행되는 다양한 서비스 간에 통신을 제공하는 것을 이 접근 방식의 주된 기능이다. 통신이 핵심이다 통신! 통신은 '메시지 전달'에 의해 제공된다. 클라이언트 프로그램과 서비스는 결코 직접 작용하지 않는다.두개 다 마이크로커널과 메시지를 교환함으로써 간접적으로 상호작용한다.
 이 접근방법의 장점은 운영체제의 확장이 용이하다는 것이다. 새로운 서비스는 사용자 공간에 추가되기 때문에 커널을 변경할 필요가 없다. 설령 커널을 변경해야 할 경우가 생겨도, 마이크로커널 자체가 작기 때문에 변경할 대상이 적다. 이 접근 방식을 택한 운영체제는 하드웨어 간에 이식이 자유롭다. 한편, 대부분의 서비스가 커널이 아니라 사용자 프로세스로 수행되기 때문에 보다 높은 보안성과 신뢰성을 제공한다. 만일 한 서비스가 잘못되더라고, 운영체제의 다른부분은 아무런 영향을 받지 않는다.

## 모듈(LKM)

 이 기술은 운영체제를 설계하는 기술 중 아직까지는 최고라고 볼 수 있다.LKM은 적재가능 커널 모듈(Loadable Kernel Module)이다. 커널은 핵심적인 구성요소의 집합을 가지고 있고, 부팅 때나 실행 중에 부가적인 서비스들을 모듈을 통해 링크한다. 중요한 것은 핵심 서비스를 제공하고 다른 서비스들은 커널이 실행되는 동안 동적으로 구현하는 것이다. 
 
 계층구조적 특성 : 커널의 각 부분이 정의되고 보호된 인터페이스를 가진다.

 But, 모듈에서 임의의 다른 모듈을 호출할 수 있다는 점에서 유연함.    

 마이크로커널적 특성 : 중심 모듈이 핵심 기능만 가지고 있고, 다른 모듈의 적재 방법과 모듈과 어떻게 통신하는지를 안다.

 But, 통신하기 위해 메시지 전달을 호출하지 않는다는 점에서 더 효율적이다. 

## 홍용 시스템(Hybrid Systems)

 엄격하게 하나의 구조를 채택하는 운영체제는 거의 존재하지 않는다. 적절하게 혼용하거나 변형해서 쓰는 경우가 많다.

 예) Apple Mac OS X, iOS, Android


