---
layout: post
title: "Testing 그리고 Fuzzing"
author: jihyunhill
categories: Fuzzing
tags: fuzzing testing afl
---

### Testing이란 무엇? 왜 필요?         

Software Testing(테스팅)은 말그대로 개발자가 만든 __소프트웨어의 보안 및 안정성을 높이기 위해__ 해당 소프트웨어를 테스트하는 것이다. "처음부터 잘 만들면 되지!그러면 테스팅 안 해도 되지 않을까?" 하는 의문을 가지는 사람이 있다면, 인간을 너무 과대 평가하는 것이다! 아무리 잘 만든 프로그램이라도, 개발자가 미처 테스팅하지 못한 부분이 있을 수 있다. 우리가 메이플 스토리를 할 때를 생각해 보자. 처음에 이 게임이 배포되기 전에 개발자들이 수많은 경우의 수를 두고 테스팅을 했을 것이다. 하.지.만 그럼에도 우리가 게임을 하면서 (예를 들어 수많은 연타를 누르거나 했을 때)버그가 발견되는 경우가 있다. 그러면 이 사항을 회사측에 알리고, 개발자는 이 버그를 고친다. 그리고 다시 버그가 잘 수정되었는지 테스팅을 한다. 그렇다. 간단하게 말하면 버그를 잡기 위해 테스팅을 한다. 테스팅은 신뢰할 수 있는 소프트웨어를 개발하는데 있어서, 그리고 사용자가 안전하게 이 프로그램을 사용하기 위해서 반드시 거쳐야 하는 과정이다.


### 그렇다면 Testing은 어떻게 하는지?

테스팅을 하는 방법은 다양하다. 예상되는(?) 원하는 결과값이 나오는지를 일일이 print문을 확인하거나 assert를 사용하는 방법도 있고, 일일이 직접 테스팅을 하는 방법과, 테스트 하는 부분을 자동화시켜서 반복해서 테스팅을 시키는 방법이 있다. 하나씩 직접 테스팅을 하는 것보다는 자동화된 테스팅이 더 많은 테스팅을 빠르게 해주기 때문에 더 효율성이 높다고 할 수 있다.    

### Testing의 한 종류인 Fuzzing     

먼저 fuzzing의 유래는 대충 이렇다.1988년 천둥번개가 치는 비오는 가을밤, 갑자기 유선에 잡음이 들어가더니 커맨드로 들어가는 인풋들 중 이상한 인풋들이 발생하게 되었다. 이 이상한 인풋들이 프로그램에 crash를 생성하기 시작했고, 밀러 교수는 이를 흥미롭게 여기고 학생들에게 이러한 예상치 못한 인풋 값들을 만들어 내는 숙제를 내주었다. 이처럼 bug를 유도하는 인풋을 생성하여 예상치 못한 버그를 잡아내는 테스팅 기법을 Fuzzing이라고 한다.

### Fuzzing에서 사용하는 mutated inputs from seed

Fuzzing에서 인풋을 생성하는 방법 중에 우리가 주목할 방법은 랜덤한 인풋을 만들어내는 방법이다. 그런데 인풋을 생성시 아무런 기준도 없이 말그대로 무작위로 만들어낸다면 테스팅하는데 쓸모있는 것이 거의 없을 수도 있다. 예를 들어서 계산기 프로그램이 있다고 하자. 우리는 소수점이나 정수, 음수, 0 등등 수에 대한 기호와 숫자를 인풋으로 받고 테스팅하기 원하는데 무작위로 만들어낸 문장들이 계속해서 인풋으로 들어온다면? 인풋이 유효하지 않을뿐더러 프로그램을 테스팅하는데 적절한 테스팅을 하지 못할 수 있다.


<br/>
그래서 fuzzing을 통해 랜덤한 인풋을 만들 때, __한 가지의 유효한 인풋을 seed로 잡아 그 유효한 인풋을 변형시켜 여러가지의 변형된 인풋을 만들어낸다.__


### Mutating 방법들

seed를 변형시켜서 테스팅 인풋을 만들어낸다는 것 까지는 어려울 것이 없다. 그런데 어떤 방법으로 mutation, 즉 변형을 시킬 것인지에 대한 논의가 필요하다. 널리 사용되는 많은 fuzzer의 중 AFL(American Fuzzing Lop) fuzzer는 mutation을 하는데 크게 7가지의 방법을 적용한다. 인풋의 비트들을 임의로 섞는다는지, 일정 수를 더하는 방법 등이 있다.          
     __AFL의 mutation방법__        
1. bit flips     
2. byte flips    
3. arithmetics       
4. known ints       
5. dictionary      
6. havoc     
7. trim           

### 끝마치며...       

<font color="purple"><b><em>퍼징의 주목적은 올바른 기능을 테스팅하는 것이 아니다!미지의 세계, 우리가 미처 다루지 못한 영역을 검증하고 테스팅하는 것이다!</font>
